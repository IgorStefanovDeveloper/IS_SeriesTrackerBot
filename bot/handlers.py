from aiogram import Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from bot.database import Database

class AddSeriesState(StatesGroup):
    waiting_for_series_name = State()
    waiting_for_seasons = State()

class NotifyState(StatesGroup):
    waiting_for_series_choice = State()
    waiting_for_notify_choice = State()

def setup_handlers(dp: Dispatcher, db: Database):
    @dp.message_handler(commands=["start"])
    async def start(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        db.add_user(user_id, username)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Series Tracker Bot!")

    @dp.message_handler(commands=["add"])
    async def add_series_start(message: types.Message):
        await AddSeriesState.waiting_for_series_name.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:")

    @dp.message_handler(state=AddSeriesState.waiting_for_series_name)
    async def add_series_name(message: types.Message, state: FSMContext):
        series_name = message.text
        await state.update_data(series_name=series_name)
        await AddSeriesState.waiting_for_seasons.set()
        await message.answer("–°–∫–æ–ª—å–∫–æ —Å–µ–∑–æ–Ω–æ–≤ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏?")

    @dp.message_handler(state=AddSeriesState.waiting_for_seasons)
    async def add_series_seasons(message: types.Message, state: FSMContext):
        try:
            seasons_watched = int(message.text)
            data = await state.get_data()
            series_name = data.get("series_name")
            user_id = message.from_user.id

            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ API-—Å–µ—Ä–≤–∏—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API_ID —Å–µ—Ä–∏–∞–ª–∞
            api_id = await fetch_series_api_id(series_name)
            db.add_series(user_id, series_name, api_id, seasons_watched)

            await state.finish()
            await message.answer(f"–°–µ—Ä–∏–∞–ª '{series_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    @dp.message_handler(commands=["list"])
    async def list_series(message: types.Message):
        user_id = message.from_user.id
        series_list = db.get_user_series(user_id)

        if not series_list:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
            return

        response = "–í–∞—à–∏ —Å–µ—Ä–∏–∞–ª—ã:\n"
        for idx, (name, seasons_watched, episodes_watched, notify) in enumerate(series_list, 1):
            notify_status = "üîî" if notify else "üîï"
            response += f"{idx}. {name} - –°–µ–∑–æ–Ω–æ–≤: {seasons_watched}, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_status}\n"

        await message.answer(response)

    @dp.message_handler(commands=["notify"])
    async def notify_start(message: types.Message):
        user_id = message.from_user.id
        series_list = db.get_user_series(user_id)

        if not series_list:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.")
            return

        response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        for idx, (name, _, _, _) in enumerate(series_list, 1):
            response += f"{idx}. {name}\n"

        await NotifyState.waiting_for_series_choice.set()
        await message.answer(response)

    @dp.message_handler(state=NotifyState.waiting_for_series_choice)
    async def notify_choose_series(message: types.Message, state: FSMContext):
        try:
            choice = int(message.text)
            series_list = db.get_user_series(message.from_user.id)
            if 1 <= choice <= len(series_list):
                series_name = series_list[choice - 1][0]
                series_id = db.get_series_id_by_name(series_name)
                await state.update_data(series_id=series_id)
                await NotifyState.waiting_for_notify_choice.set()
                await message.answer(f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ '{series_name}'? (–¥–∞/–Ω–µ—Ç)")
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    @dp.message_handler(state=NotifyState.waiting_for_notify_choice)
    async def notify_set_choice(message: types.Message, state: FSMContext):
        notify = message.text.lower() == "–¥–∞"
        data = await state.get_data()
        series_id = data.get("series_id")
        user_id = message.from_user.id
        db.update_notify_flag(user_id, series_id, notify)
        await state.finish()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
